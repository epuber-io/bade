
# TODO

- Before creating lambda string make syntax tree flat (to array), then some optimizations can be done

- Skip every empty lines, even with different indent (code can be much readable)

- Everything has indent logic

- normal comments should appear in code (for debugging purpose)

- merging all attributes with same name (eg class names)

- escaped things
	- output (`&=`)
	- keyed params in mixin (`&:`)
	- arguments in tags (`&:`)

- key value things must have same syntax as hash in ruby or javascript: `key: value`
	- mixins (keyed)
	- tags

- mixins should parse text after calling: `+mixin_name('ds') some text`

- rewrite mixins.md document


## Name

- Bade
- Libre


## Language

### To implement

- mixins
    - call `+mixin_name(attribute1, named_attribute1 = value1)
    			div
    				| normal block content to mixin OR
                block chapter
                	p content to named block`
    
    - define `mixin mixin_name(attribute1, named_attribute1 = default_value)
    			div.default
    				- default_block.call // calling block, can be used .nil? for inspecting if was the block defined
    			div.chapter_content
    				- chapter.call`

    - required blocks

- interpolation `#{}`
- unescaped interpolation `#{{}}`


#### Lint (??)

##### Mixins

- checking number of required parameters
- checking existence of keyed parameters

- checking of existence named blocks

- multiple parameters of same name (maybe it will won't parse by Ruby)


#### runtime class Block

- \#call   // call given block even if there is no content, no parameters yet
- \#call\!  // call given block, if there is no specified, runtime error, no parameters yet
- \#only_text_given?   // given input have only text
- \#nil?    // when the block was not specified
- \#output    // or something like that, for getting result output and storing somewhere
- \#output!    // same as \#call! but for \#output 


### To think about

- footnotes
- links
    - to different location in book and same file
    - to website

